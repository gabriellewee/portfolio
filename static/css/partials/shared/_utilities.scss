@use 'sass:color';
@use 'sass:string';

// viewports
$iphone-mini: 320px;
$iphone: 375px;
$iphone-max: 414px;
$ipad-mini: 768px;
$ipad-11: 834px;
$mbp-14: 1512px;
$mbp-16: 1728px;

$medium: 568px;
$large: 1024px;
$x-large: 1280px;

// functions
@function hexToHSL($color) {
	@return "#{color.channel($color, "hue", $space: hsl)} #{color.channel($color, "saturation", $space: hsl)} #{color.channel($color, "lightness", $space: hsl)}";
}

// mixins
@mixin viewport($viewport) {
	@if $viewport == "medium" {
		@media screen and (min-width: $medium) and (max-height: 450px), screen and (min-width: $ipad-mini) {
			@content;
		}
	} @else if $viewport == "small" {
		@media screen and (max-width: #{$medium - 1px}) and (min-height: 451px), screen and (max-width: #{$ipad-mini}) {
			@content;
		}
	} @else {
		@media only screen and (min-width: $viewport) {
			@content;
		}
	}
}

@mixin container($container, $a, $b: $a) {
	@supports not(container-type: inline-size) {
		@include viewport($a) {
			@content;
		}
	}
	@if (string.index(#{$b}, "min")) {
		@container #{$container} #{$b} {
			@content;
		}
	} @else {
		@container #{$container} (min-width: #{$b}) {
			@content;
		}
	}
}

@mixin max {
	@supports (padding: max(0px)) {
		@content;
	}
}

@mixin selection {
	::-moz-selection {
		@content;
	}
	::selection {
		@content;
	}
}

@mixin theme($theme, $root: false) {
	@if $root == true {
		@media (prefers-color-scheme: #{$theme}) {
			:root {
				@content;
			}
		}
		@if $theme == dark {
			:root:has(#option-color:not(.inactive):checked) {
				@content;
			}
		} @else if $theme == light {
			:root {
				@content;
			}
		}
		:root.theme-#{$theme} {
			@content;
		}
	} @else {
		@media (prefers-color-scheme: #{$theme}) {
			@content;
		}
		@if $theme == dark {
			:root:has(#option-color:not(.inactive):checked) & {
				@content;
			}
		} @else if $theme == light {
			& {
				@content;
			}
		}
		.theme-#{$theme} & {
			@content;
		}
	}
 }

@mixin contrast($theme, $root: false) {
	@if $root == true {
		@if $theme == both {
			@media (prefers-contrast: more) {
				:root {
					@content;
				}
			}
			:root:has(#option-contrast:not(.inactive):checked) {
				@content;
			}
			.theme-contrast {
				@content;
			}
		} @else if $theme == dark {
			@media (prefers-color-scheme: #{$theme}) and (prefers-contrast: more) {
				:root {
					@content;
				}
			}
			@media (prefers-color-scheme: #{$theme}) {
				.theme-contrast {
					@content;
				}
			}
			:root:has(#option-color:not(.inactive):checked ~ #option-contrast:not(.inactive):checked) {
				@content;
			}
			.theme-#{$theme}.theme-contrast {
				@content;
			}
		} @else if $theme == light {
			@media (prefers-color-scheme: #{$theme}) and (prefers-contrast: more) {
				:root {
					@content;
				}
			}
			@media (prefers-color-scheme: #{$theme}) {
				.theme-contrast {
					@content;
				}
			}
			:root:has(#option-color:not(.inactive):not(:checked) ~ #option-contrast:not(.inactive):checked) {
				@content;
			}
			.theme-#{$theme}.theme-contrast {
				@content;
			}
		}
	} @else {
		@if $theme == both {
			@media (prefers-contrast: more) {
				@content;
			}
			:root:has(#option-contrast:not(.inactive):checked) & {
				@content;
			}
			.theme-contrast & {
				@content;
			}
		} @else if $theme == dark {
			@media (prefers-color-scheme: #{$theme}) and (prefers-contrast: more) {
				@content;
			}
			@media (prefers-color-scheme: #{$theme}) {
				.theme-contrast & {
					@content;
				}
			}
			:root:has(#option-color:not(.inactive):checked ~ #option-contrast:not(.inactive):checked) & {
				@content;
			}
			.theme-#{$theme}.theme-contrast & {
				@content;
			}
		} @else if $theme == light {
			@media (prefers-color-scheme: #{$theme}) and (prefers-contrast: more) {
				@content;
			}
			@media (prefers-color-scheme: #{$theme}) {
				.theme-contrast & {
					@content;
				}
			}
			:root:has(#option-color:not(.inactive):not(:checked) ~ #option-contrast:not(.inactive):checked) & {
				@content;
			}
			.theme-#{$theme}.theme-contrast & {
				@content;
			}
		}
	}
}

@mixin reduce-transparency($level: null) {
	@media (prefers-reduced-transparency: reduce) {
		@content;
	}
	:root:has(#option-contrast:not(.inactive):checked) & {
		@content;
	}
	.theme-reduce-transparency & {
		@content;
	}
}

@mixin hover {
	@media (hover: hover) and (pointer: fine) {
		@content;
	}
}

@mixin invert($amount: 0%) {
	@media (inverted-colors: inverted) {
		filter: invert($amount);
	}
}

@mixin clip-path($support: true) {
	@if $support == true {
		@supports (-webkit-clip-path: polygon(0 0)) or (clip-path: polygon(0 0)) {
		  	@content;
		}
	} @else {
		@supports not ((-webkit-clip-path: polygon(0 0)) or (clip-path: polygon(0 0))) {
		  	@content;
		}
	}
}

@mixin clip-path-edges($cut, $dir: null) {
	@if $dir == up {
		@include clip-path(false) {
			border-top-left-radius: #{$cut + 1px};
			border-top-right-radius: #{$cut + 1px};
		}
		@include clip-path {
			clip-path: polygon(#{$cut} 0%, calc(100% - #{$cut}) 0%, 100% #{$cut}, 100% 100%, 0 100%, 0% #{$cut});
		}
	} @else if $dir == down {
		@include clip-path(false) {
			border-bottom-left-radius: #{$cut + 1px};
			border-bottom-right-radius: #{$cut + 1px};
		}
		@include clip-path {
			clip-path: polygon(100% 0, 100% calc(100% - #{$cut}), calc(100% - #{$cut}) 100%, #{$cut} 100%, 0% calc(100% - #{$cut}), 0 0);
		}
	} @else if $dir == left {
		@include clip-path(false) {
			border-top-left-radius: #{$cut + 1px};
			border-bottom-left-radius: #{$cut + 1px};
		}
		@include clip-path {
			clip-path: polygon(#{$cut} 0%, 100% 0, 100% 100%, #{$cut} 100%, 0% calc(100% - #{$cut}), 0% #{$cut});
		}
	} @else if $dir == right {
		@include clip-path(false) {
			border-top-right-radius: #{$cut + 1px};
			border-bottom-right-radius: #{$cut + 1px};
		}
		@include clip-path {
			clip-path: polygon(0 0, calc(100% - #{$cut}) 0%, 100% #{$cut}, 100% calc(100% - #{$cut}), calc(100% - #{$cut}) 100%, 0 100%);
		}
	} @else if $cut == 0 {
		@include clip-path(false) {
			border-radius: 0;
		}
		@include clip-path {
			clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
		}
	} @else {
		@include clip-path(false) {
			border-radius: #{$cut + 1px};
		}
		@include clip-path {
			clip-path: polygon(#{$cut} 0%, calc(100% - #{$cut}) 0%, 100% #{$cut}, 100% calc(100% - #{$cut}), calc(100% - #{$cut}) 100%, #{$cut} 100%, 0% calc(100% - #{$cut}), 0% #{$cut});
		}
	}
}

@mixin gradient-text($one, $two, $three: null) {
	color: $one;
	@supports (-webkit-text-fill-color: transparent) {
		background-color: $one;
		background: linear-gradient(135deg, $one, $two);
		background-clip: text;
		@if $three {
			-webkit-text-fill-color: $three;
		} @else {
			-webkit-text-fill-color: transparent;
		}
		@include theme(light) {
			filter: unset;
		}
		@include theme(dark) {
			@if $three {
				filter: brightness(1.3);
			} @else {
				filter: brightness(1.2);
			}
		}
	}
}

@mixin gradient-headline($one, $two, $three, $four, $position: 50%) {
	color: $one;
	@supports (-webkit-text-fill-color: transparent) {
		background-color: $one;
		background: linear-gradient(
			135deg,
			$one,
			$two,
			$three,
			$four
		) $position 0% / 200% 100%;
		background-clip: text;
		-webkit-text-fill-color: transparent;
		@include theme(dark) {
			filter: brightness(1.2);
		}
	}
}

@mixin square($width) {
	width: $width;
	aspect-ratio: 1 / 1;
}

@mixin full-size($type: null) {
	@if $type == screen {
		height: 100vh;
		width: 100vw;
	} @else if $type == null {
		height: 100%;
		width: 100%;
	}
}

@mixin full-offset($offset, $y: top, $x: left, $p: absolute) {
	position: #{$p};
	@if $offset == screen {
		#{$y}: 0;
		#{$x}: 0;
	} @else {
		#{$y}: $offset * -1;
		#{$x}: $offset * -1;
	}
	@if $offset == 0 {
		@include full-size;
	} @else if $offset == screen {
		@include full-size(screen);
	} @else {
		height: calc(100% + #{$offset * 2});
		width: calc(100% + #{$offset * 2});
	}
}

@mixin border-radius($radius) {
	border-radius: $radius;
	overflow: hidden;
	@include clip-path {
		clip-path: inset(0 round $radius);
	}
}

@mixin blur($amount, $color, $lightness, $crisp, $blur) {
	& {
		background-color: hsl(from $color h s calc(l * #{$lightness}) / $crisp);
	}
	@supports ((-webkit-backdrop-filter: blur(0px)) or (backdrop-filter: blur(0px))) {
		backdrop-filter: blur($amount);
		background-color: hsl(from $color h s calc(l * #{$lightness}) / $blur);
		@include reduce-transparency {
			backdrop-filter: unset;
			background-color: hsl(from $color h s calc(l * #{$lightness}));
		}
	}
}

@mixin focus-shadow($color: var(--color-focus), $radius: 1px, $width: calc(var(--p)/4)) {
	@if $radius {
		border-radius: $radius;
	}
	box-shadow: 0 0 0 $width $color;
}

@mixin svg-path {
	g, path, line, polyline, polygon, circle, ellipse, rect {
		@content;
	}
}

@mixin background-image($bg, $ext, $webp: true) {
	background-repeat: no-repeat;
	background-position: center left;
	background-image: url("/static/images/#{$bg}@2x.#{$ext}");
	@supports (background-image: -webkit-image-set(url("") 1x, url("") 2x)) {
		background-image: -webkit-image-set(url("/static/images/#{$bg}.#{$ext}") 1x, url("/static/images/#{$bg}@2x.#{$ext}") 2x);
		@if $webp == true {
			background-image: -webkit-image-set(url("/static/images/#{$bg}.webp") 1x, url("/static/images/#{$bg}@2x.webp") 2x);
		}
	}
	@supports (background-image: image-set(url("") 1x, url("") 2x)) {
		background-image: image-set(url("/static/images/#{$bg}.#{$ext}") 1x, url("/static/images/#{$bg}@2x.#{$ext}") 2x);
		@if $webp == true {
			background-image: image-set(url("/static/images/#{$bg}.webp") 1x, url("/static/images/#{$bg}@2x.webp") 2x);
		}
	}
}

@mixin no-scrollbar {
	overflow: auto;
	overflow: -moz-scrollbars-none;
	-ms-overflow-style: none;
	scrollbar-width: none;
	-webkit-overflow-scrolling: touch;
	&::-webkit-scrollbar {
		height: 0;
		width: 0;
		display: none;
	}
}

@mixin font-weight-width($weight, $width) {
	font-weight: $weight;
	font-stretch: #{$width * 1%};
	font-variation-settings: "wght" $weight, "wdth" $width;
}

// reusable styles
@mixin hide {
	position: absolute;
	appearance: none;
	clip: rect(0,0,0,0);
	z-index: -1;
	opacity: 0;
	@include square(1px);
}

@mixin before($color: null, $border: 3px, $bezel: #{$border}) {
	opacity: 0;
	content: "";
	display: block;
	position: absolute;
	top: $border * -1;
	left: $border * -1;
	width: calc(100% + #{$border*2});
	height: calc(100% + #{$border*2});
	@if $color {
		background: $color;
	}
	@include clip-path-edges(#{$bezel});
}

@mixin button-shape($a: 1.25, $b: 5%, $c: null, $dir: null) {
	@if $dir == left and $c != null {
		clip-path: polygon(calc(var(--p)*#{$a}) 0%, calc(100% - #{$c}) 0%, 100% #{$c}, 100% calc(100% - #{$c}), calc(100% - #{$c}) 100%, calc(var(--p)*#{$a}) 100%, 0 #{50% + $b}, 0 #{50% - $b});
	} @else if $dir == right and $c != null {
		clip-path: polygon(#{$c} 0%, calc(100% - calc(var(--p)*#{$a})) 0%, 100% #{50% - $b}, 100% #{50% + $b}, calc(100% - calc(var(--p)*#{$a})) 100%, #{$c} 100%, 0 calc(100% - #{$c}), 0 #{$c});
	} @else {
		clip-path: polygon(calc(var(--p)*#{$a}) 0%, calc(100% - calc(var(--p)*#{$a})) 0%, 100% #{50% - $b}, 100% #{50% + $b}, calc(100% - calc(var(--p)*#{$a})) 100%, calc(var(--p)*#{$a}) 100%, 0 #{50% + $b}, 0 #{50% - $b});
	}
}

@mixin button {
	display: block;
	font-size: 1rem;
	@include clip-path(false) {
		padding: var(--p) calc(var(--p)*2);
		@include border-radius(calc(var(--p)/4));
	}
	@include clip-path {
		padding: var(--p) calc(var(--p)*2.5);
		@include button-shape;
	}
}

@mixin recipe-button {
	--background: var(--color-slate) radial-gradient(
		circle at center right,
		color-mix(
			in srgb,
			var(--color-periwinkle),
			var(--color-mint)
		) 0,
		var(--color-mint) 25%,
		var(--color-slate) 75%,
		var(--color-slate) 100%
	);
	--outline: radial-gradient(
		circle at center left,
		color-mix(
			in srgb,
			white,
			var(--color-mint)
		),
		color-mix(
			in srgb,
			white 70%,
			var(--color-mint)
		)
	);
	--background-hover-position: 100%;

	@include theme(light) {
		--background-active: var(--color-iron) radial-gradient(
			circle at center left,
			var(--color-iron),
			color-mix(
				in srgb,
				var(--color-iron) 80%,
				white
			)
		);
	}
	@include theme(dark) {
		--background-active: var(--color-slate) radial-gradient(
			circle at center left,
			color-mix(
				in srgb,
				var(--color-iron) 80%,
				white
			),
			var(--color-slate)
		);
	}
}

@mixin radio($background: transparent, $color: var(--color-mint), $focus: hsl(from var(--color-mint) h s l / .7), $contrast: color-mix(in srgb, var(--color-slate), $color)) {
	& {
		--background: #{$background};
		--color: #{$color};
		--focus: #{$focus};
		--contrast: #{$contrast};

		display: flex;
		cursor: pointer;
		position: relative;
	}
	&::before, &::after {
		content: "";
		display: block;
	}
	&::before {
		min-width: calc(var(--p)*2);
		height: calc(var(--p)*2);
		border-radius: calc(var(--p)*2);
		margin-right: calc(var(--p)*.75);
		background-color: var(--background);
		@include contrast(light) {
			border: 2px solid var(--contrast);
		}
	}
	&::after {
		opacity: 0;
		border-radius: calc(var(--p)/3*4);
		position: absolute;
		left: calc(var(--p)/3);
		top: calc(var(--p)/3);
		background-color: $color;
		@include square(calc(var(--p)/3*4));
	}
	&:is(input:focus-visible + label) {
		&::before {
			@include focus-shadow(var(--focus), false);
		}
	}
}