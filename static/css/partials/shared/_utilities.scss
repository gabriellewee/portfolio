// viewports
$iphone-mini: 320px;
$iphone: 375px;
$iphone-max: 414px;
$mobile: 568px;
$ipad-mini: 768px;
$ipad-11: 834px;
$desktop-small: 1024px;
$desktop: 1280px;
$mbp-14: 1512px;
$mbp-16: 1728px;
$lg-5k: 2560px;
$container-mobile: 350px;

// colors
$message: #e9e9eb;

$iron: #263238;
$blush: #F5C8BF;
$rose: #D19487;
$mauve: #B2738E;
$slate: #577783;
$mint: #8BB29A;
$oak: #D1AE87;

$aqua: #73d1c8;
$peach: #f78c6a;
$periwinkle: #82aaff;
$violet: #D18FF0;

// functions
@function hexToHSL($color) {
	@return "#{hue($color)},#{saturation($color)},#{lightness($color)}";
}

// mixins
@mixin viewport($viewport) {
	@if $viewport == "mobile" {
		@media screen and (min-width: $mobile) and (max-height: 450px), screen and (min-width: $ipad-mini) {
			@content;
		}
	} @else {
		@media only screen and (min-width: $viewport) {
			@content;
		}
	}
}

@mixin container($container, $a, $b: $a) {
	@supports not(container-type: inline-size) {
		@include viewport($a) {
			@content;
		}
	}
	@if (str-index(#{$b}, "min")) {
		@container #{$container} #{$b} {
			@content;
		}
	} @else {
		@container #{$container} (min-width: #{$b}) {
			@content;
		}
	}
}

@mixin max {
	@supports (padding: max(0px)) {
		@content;
	}
}

@mixin dark {
	@media (prefers-color-scheme: dark) {
		@content;
	}
}

@mixin hover {
	@media (hover: hover) and (pointer: fine) {
		@content;
	}
}

@mixin clip-path($support: true) {
	@if $support == true {
		@supports (-webkit-clip-path: polygon(0 0)) or (clip-path: polygon(0 0)) {
		  	@content;
		}
	} @else {
		@supports not ((-webkit-clip-path: polygon(0 0)) or (clip-path: polygon(0 0))) {
		  	@content;
		}
	}
}

@mixin clip-path-edges($cut) {
	@include clip-path(false) {
		border-radius: #{$cut + 1px};
	}
	@include clip-path {
		clip-path: polygon(#{$cut} 0%, calc(100% - #{$cut}) 0%, 100% #{$cut}, 100% calc(100% - #{$cut}), calc(100% - #{$cut}) 100%, #{$cut} 100%, 0% calc(100% - #{$cut}), 0% #{$cut});
	}
}

@mixin gradient-text($one, $two, $underline) {
	color: hsl($one);
	@supports (-webkit-text-fill-color: transparent) or (text-fill-color: transparent) {
		background-color: hsl($one);
		background: linear-gradient(135deg, hsl($one) 0%, hsl($two) 100%);
		background-clip: text;
		@include dark {
			background: linear-gradient(135deg, hsl($one) 0%, hsl($two) 80%);
			background-clip: text;
			filter: brightness(1.1);
		}
		@if $underline == true {
			-webkit-text-fill-color: hsla($one, .5);
		} @else {
			-webkit-text-fill-color: transparent;
		}
	}
}

@mixin border-radius($radius) {
	border-radius: $radius;
	overflow: hidden;
	@include clip-path {
		-webkit-clip-path: inset(0 round $radius);
		clip-path: inset(0 round $radius);
	}
}

@mixin blur-check {
	@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
		@content;
	}
}

@mixin blur-bg($bg, $crisp, $blur, $rgb: null) {
	@if $rgb != null {
		background-color: rgba($rgb, $crisp);
	} @else {
		background-color: hsla(#{$bg}, $crisp);
	}
	@include blur-check {
		@if $rgb != null {
			background-color: rgba($rgb, $blur);
		} @else {
			background-color: hsla(#{$bg}, $blur);
		}
	}
}

@mixin blur($blur, $bg, $crisp, $blurry, $rgb: null) {
	@include blur-bg($bg, $crisp, $blurry, $rgb);
	@include blur-check {
		backdrop-filter: blur($blur);
		@content;
	}
}

@mixin focus-shadow($color: var(--color-focus), $inset: null) {
	box-shadow: $inset 0 0 0 calc(var(--p)/4) $color;
}

@mixin svg-path {
	group, path, line, polyline, polygon, circle, ellipse, rect {
		@content;
	}
}

@mixin background-image($bg, $ext, $webp: true) {
	background-repeat: no-repeat;
	background-position: center left;
	background-image: url("/static/images/#{$bg}@2x.#{$ext}");
	@supports (background-image: -webkit-image-set(url("") 1x, url("") 2x)) {
		background-image: -webkit-image-set(url("/static/images/#{$bg}.#{$ext}") 1x, url("/static/images/#{$bg}@2x.#{$ext}") 2x);
		@if $webp == true {
			background-image: -webkit-image-set(url("/static/images/#{$bg}.webp") 1x, url("/static/images/#{$bg}@2x.webp") 2x);
		}
	}
	@supports (background-image: image-set(url("") 1x, url("") 2x)) {
		background-image: image-set(url("/static/images/#{$bg}.#{$ext}") 1x, url("/static/images/#{$bg}@2x.#{$ext}") 2x);
		@if $webp == true {
			background-image: image-set(url("/static/images/#{$bg}.webp") 1x, url("/static/images/#{$bg}@2x.webp") 2x);
		}
	}
}

@mixin no-scrollbar {
	overflow: auto;
	overflow: -moz-scrollbars-none;
	-ms-overflow-style: none;
	scrollbar-width: none;
	-webkit-overflow-scrolling: touch;
	&::-webkit-scrollbar {
		height: 0;
		width: 0;
		display: none;
	}
}

@mixin font-weight-width($weight, $width) {
	font-weight: $weight;
	font-stretch: #{$width * 1%};
	font-variation-settings: "wght" $weight, "wdth" $width;
}

// reusable styles
@mixin before($color: var(--color-blush)) {
	@include clip-path-edges(3px);
	opacity: 0;
	content: "";
	display: block;
	position: absolute;
	top: calc(var(--p)/-4);
	left: calc(var(--p)/-4);
	width: calc(100% + var(--p)/2);
	height: calc(100% + var(--p)/2);
	background: $color;
}
@mixin button-outline-shape {
	clip-path: polygon(calc(var(--p)*1.375) 0%, calc(100% - calc(var(--p)*1.375)) 0%, 100% 43%, 100% 57%, calc(100% - calc(var(--p)*1.375)) 100%, calc(var(--p)*1.375) 100%, 0 57%, 0 43%);
}
@mixin button-shape {
	clip-path: polygon(calc(var(--p)*1.25) 0%, calc(100% - calc(var(--p)*1.25)) 0%, 100% 45%, 100% 55%, calc(100% - calc(var(--p)*1.25)) 100%, calc(var(--p)*1.25) 100%, 0 55%, 0 45%);
}
@mixin button {
	display: block;
	color: white;
	font-size: 1rem;
	@include clip-path(false) {
		@include border-radius(calc(var(--p)/4));
		padding: var(--p) calc(var(--p)*2);
	}
	@include clip-path {
		@include button-shape;
		padding: var(--p) calc(var(--p)*2.5);
	}
}